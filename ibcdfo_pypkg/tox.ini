#
# Setup and manage python virtual environments that allow users to develop and
# test the ibcdfo python package.
#

[tox]
requires = tox>=4
env_list = nocoverage

[testenv]
allowlist_externals = wget
description = Run the ibcdfo full test suite
basepython = py3
passenv = COVERAGE_FILE, COVERAGE_XML_FILE, COVERAGE_HTML_FILE, PYTHONPATH
setenv =
    COV_FILE      = {env:COVERAGE_FILE:.coverage_ibcdfo}
    COV_XML_FILE  = {env:COVERAGE_XML_FILE:cobertura_ibcdfo.xml}
    COV_HTML_FILE = {env:COVERAGE_HTML_FILE:htmlcov_ibcdfo}
deps =
    coverage: coverage
usedevelop =
    coverage: true
    nocoverage: false
commands =
    # TODO: We already ask users to add BenDFO/py to their PYTHONPATH.  We
    # should, therefore, be able to alter the use of env vars so that test code
    # can automatically find dfo.dat.  No more downloading under-the-hood, no
    # more need to clean these up.
    wget https://raw.githubusercontent.com/POptUS/BenDFO/main/data/dfo.dat -O dfo.dat
    nocoverage: python -m unittest ibcdfo -v
    coverage: coverage run --data-file={env:COV_FILE} -m unittest discover -s ./src/ibcdfo -t .. -v

[testenv:pounders]
description = Run the ibcdfo pounders test suite
commands =
    wget https://raw.githubusercontent.com/POptUS/BenDFO/main/data/dfo.dat -O dfo.dat
    python -m unittest ibcdfo.pounders -v

[testenv:manifold_sampling]
description = Run the ibcdfo manifold_sampling test suite
commands =
    wget https://raw.githubusercontent.com/POptUS/BenDFO/main/data/dfo.dat -O dfo.dat
    python -m unittest ibcdfo.manifold_sampling -v

[testenv:report]
description = Generate coverage reports
depends = coverage
deps = coverage
skip_install = true
commands =
    coverage report --data-file={env:COV_FILE}
    coverage html   --data-file={env:COV_FILE} -d {env:COV_HTML_FILE}
    coverage xml    --data-file={env:COV_FILE} -o {env:COV_XML_FILE}

[testenv:check]
# NOTE: This only runs on the Python code in this package directly.  It is
# **not** running on the code symlinked into the package.
#
# For a full check, prefer running tools/check_flake8_compliance.sh.
description = Run code quality checks
deps =
    setuptools
    flake8
commands =
    python setup.py check --strict --metadata
    flake8 --config={toxinidir}/.flake8

[testenv:format]
# NOTE: This task will potentially alter Python code in your local clone.  Avoid
# using this if you have uncommitted changes or untracked files.
#
# This task is following the symlinks and formatting the original source code in
# place.
description = Format Python code
deps =
    black
commands =
    black --config={toxinidir}/.black {toxinidir}
